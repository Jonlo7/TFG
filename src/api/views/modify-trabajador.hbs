<div class="flex justify-center w-full">
    <form action="/modify-trabajador" method="POST" class="lg:min-w-[582px]">
        {{> csrftokeninput }}

        <div class="flex flex-col space-y-1.5 p-6">
            <h3 class="text-2xl font-semibold leading-none tracking-tight">Modify user password</h3>
            <p class="text-gray-500 dark:text-gray-400">Enter your new password to update your account</p>
        </div>
        <div class="p-6 space-y-4">
            <div class="space-y-2">
                <label
                    class="text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70"
                    for="email">
                    Email
                </label>
                <input name="email"
                    class="dark:text-black flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50"
                    id="email" readonly="" value="{{trabajador.email}}" />
            </div>
            <div class="space-y-2">
                <label
                    class="text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70"
                    for="password">
                    Nueva contraseña
                </label>
                <input autofocus name="password"
                    class="dark:text-black flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50"
                    id="password" type="password" />
            </div>

        </div>
        <div class="flex items-center p-6">
            <button
                class="text-white bg-gradient-to-r from-blue-500 via-blue-600 to-blue-700 hover:bg-gradient-to-br focus:ring-4 focus:outline-none focus:ring-blue-300 dark:focus:ring-blue-800 shadow-lg shadow-blue-500/50 dark:shadow-lg dark:shadow-blue-800/80 font-medium rounded-lg text-sm px-5 py-2.5 text-center me-2 mb-2 w-full">
                Actualizar contraseña
            </button>
        </div>
    </form>
</div>

<script>
    let alarmasData;
    let estadoAnterioridLote = 0;
    let estadoAnteriorBotellasLote = 0;

    window.onload = async function () {
        const responseAlarmas = await fetch('/alarmas');
        alarmasData = await responseAlarmas.json();
        const responseLotes = await fetch('/tiempo-real');
        const primeraData = await responseLotes.json();
        estadoAnterioridLote = primeraData.todasTiempoReal.find(c => c.clave === 'idLote').valorParseado;
        estadoAnteriorBotellasLote = primeraData.todasTiempoReal.find(c => c.clave === 'botellasLote').valorParseado;
    };

    let estadoAnterior = new Array(11).fill(false);

    async function checkAlarmas() {
        let response = await fetch('/tiempo-real');
        let data = await response.json();
        let alarmas = new Array(11);
        alarmas[0] = data.todasTiempoReal.find(c => c.clave === 'Alarma0').valorParseado;
        alarmas[10] = data.todasTiempoReal.find(c => c.clave === 'Alarma10').valorParseado;
        alarmas[3] = data.todasTiempoReal.find(c => c.clave === 'Alarma3').valorParseado;
        alarmas[6] = data.todasTiempoReal.find(c => c.clave === 'Alarma6').valorParseado;
        alarmas[5] = data.todasTiempoReal.find(c => c.clave === 'Alarma5').valorParseado;
        alarmas[1] = data.todasTiempoReal.find(c => c.clave === 'Alarma1').valorParseado;
        alarmas[2] = data.todasTiempoReal.find(c => c.clave === 'Alarma2').valorParseado;
        alarmas[4] = data.todasTiempoReal.find(c => c.clave === 'Alarma4').valorParseado;
        alarmas[7] = data.todasTiempoReal.find(c => c.clave === 'Alarma7').valorParseado;
        alarmas[9] = data.todasTiempoReal.find(c => c.clave === 'Alarma9').valorParseado;
        alarmas[8] = data.todasTiempoReal.find(c => c.clave === 'Alarma8').valorParseado;
        for (let i = 0; i < alarmas.length; i++) {
            if (estadoAnterior[i] !== alarmas[i]) {
                let denom = 'Alarma' + i;
                let setAlarma = 'setAlarma' + i;
                let resetAlarma = 'resetAlarma' + i;
                let responseLotes = await fetch('/lotes');
                let lotes = await responseLotes.json();
                if (alarmas[i] === true) {
                    console.log('Alarma ' + i + ' ha saltado');
                    let alarmaAscendente = alarmasData.todasAlarmas.find(c => c.denom === denom).id_Alarma;
                    let horaSalto = data.todasTiempoReal.find(c => c.clave === setAlarma).valorParseado;
                    numLote = data.todasTiempoReal.find(c => c.clave === 'idLote').valorParseado;
                    let idLote = lotes.todosLotes.find(c => c.numLote === numLote).id_Lote;
                    let body = {
                        idAlarma: alarmaAscendente,
                        horaSalto: horaSalto,
                        idLote: idLote
                    };
                    fetch('/flanco-ascendente', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                            'x-csrf-token': document.querySelector('input[name="_csrf"]').value
                        },
                        body: JSON.stringify({
                            body,
                        }),
                    });
                } else {
                    console.log('Alarma ' + i + ' ha sido resuelta');
                    let alarmaDescendente = alarmasData.todasAlarmas.find(c => c.denom === denom).id_Alarma;
                    let horaSalto = data.todasTiempoReal.find(c => c.clave === setAlarma).valorParseado;
                    numLote = data.todasTiempoReal.find(c => c.clave === 'idLote').valorParseado;
                    let idLote = lotes.todosLotes.find(c => c.numLote === numLote).id_Lote;
                    let horaResolucion = data.todasTiempoReal.find(c => c.clave === resetAlarma).valorParseado;
                    let body = {
                        idAlarma: alarmaDescendente,
                        horaSalto: horaSalto,
                        idLote: idLote,
                        horaResolucion: horaResolucion
                    };
                    fetch('/flanco-descendente', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                            'x-csrf-token': document.querySelector('input[name="_csrf"]').value
                        },
                        body: JSON.stringify({
                            body,
                        }),
                    });
                }
            }
        }
        estadoAnterior = alarmas;
        let idLote = data.todasTiempoReal.find(c => c.clave === 'idLote').valorParseado;
        if (estadoAnterioridLote !== idLote) {
            let fechaInicioLote = data.todasTiempoReal.find(c => c.clave === 'fechaInicioLote').valorParseado;
            let body = {
                numLote: idLote,
                horaInicio: fechaInicioLote
            };
            console.log(body);
            fetch('/nuevo-lote', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'x-csrf-token': document.querySelector('input[name="_csrf"]').value
                },
                body: JSON.stringify({
                    body,
                }),
            });
        }

        let botellasLote = data.todasTiempoReal.find(c => c.clave === 'botellasLote').valorParseado;
        if (estadoAnteriorBotellasLote !== botellasLote) {
            let fechaFinLote = data.todasTiempoReal.find(c => c.clave === 'fechaFinLote').valorParseado;
            let fechaInicioLote = data.todasTiempoReal.find(c => c.clave === 'fechaInicioLote').valorParseado;
            let body = {
                numLote: idLote,
                botellasCorrectas: botellasLote,
                horaInicio: fechaInicioLote,
                horaFin: fechaFinLote
            };
            fetch('/fin-lote', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'x-csrf-token': document.querySelector('input[name="_csrf"]').value
                },
                body: JSON.stringify({
                    body,
                }),
            });
        }
        estadoAnterioridLote = idLote;
        estadoAnteriorBotellasLote = botellasLote;
    }

    setInterval(checkAlarmas, 500);

</script>