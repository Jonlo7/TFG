<head>
  <style>
    .container {
      display: flex;
      flex-direction: column;
      align-items: center;
      gap: 1rem;
      height: 86vh;
    }
  </style>
</head>

<body>
  <div class="container">
    {{> csrftokeninput }}
    <div class="bg-white dark:bg-gray-950 rounded-lg shadow-lg w-10/12">
      <div class="p-4 border-b dark:border-gray-800 flex justify-between items-center">
        <h2 class="text-lg font-semibold">Administración de Trabajadores</h2>
        <div class="flex space-x-2 mr-12">
          <button id="addTrabajador"
            class="text-white bg-gradient-to-r from-blue-500 via-blue-600 to-blue-700 hover:bg-gradient-to-br focus:ring-4 focus:outline-none focus:ring-blue-300 dark:focus:ring-blue-800 shadow-lg shadow-blue-500/50 dark:shadow-lg dark:shadow-blue-800/80 font-medium rounded-lg text-sm mr-5 px-4 py-2.5 text-center">
            Añadir Trabajador
          </button>
          <button id="deleteTrabajador"
            class="text-white bg-gradient-to-r from-blue-500 via-blue-600 to-blue-700 hover:bg-gradient-to-br focus:ring-4 focus:outline-none focus:ring-blue-300 dark:focus:ring-blue-800 shadow-lg shadow-blue-500/50 dark:shadow-lg dark:shadow-blue-800/80 font-medium rounded-lg text-sm ml-5 px-4 py-2.5 text-center">
            Borrar Trabajador
          </button>
        </div>
      </div>
      <div class="p-12 ml-12">
        <div class="mb-4 w-11/12">
          <input
            class="flex h-10 rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 w-full"
            placeholder="Buscar por número de lote, fecha, etc." />
        </div>
        <div class="relative w-full overflow-auto">
          <table class="w-11/12 text-sm">
            <thead class="[&amp;_tr]:border-b">
              <tr class="border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted">
                <th
                  class="h-12 px-4 text-left align-middle font-medium text-muted-foreground [&amp;:has([role=checkbox])]:pr-0">
                  ID Trabajador
                </th>
                <th
                  class="h-12 px-4 text-left align-middle font-medium text-muted-foreground [&amp;:has([role=checkbox])]:pr-0">
                  Nombre
                </th>
                <th
                  class="h-12 px-4 text-left align-middle font-medium text-muted-foreground [&amp;:has([role=checkbox])]:pr-0">
                  Apellido
                </th>
                <th
                  class="h-12 px-4 text-left align-middle font-medium text-muted-foreground [&amp;:has([role=checkbox])]:pr-0">
                  Email
                </th>
                <th
                  class="h-12 px-4 text-left align-middle font-medium text-muted-foreground [&amp;:has([role=checkbox])]:pr-0">
                  Rol
                </th>
              </tr>
            </thead>
            <tbody class="[&amp;_tr:last-child]:border-0">
              {{#each trabajadores}}
              <tr
                class="border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted peer-hover:translate-y-0.5 translate-x-0.5 transition-color">
                <td class="p-4 align-middle [&amp;:has([role=checkbox])]:pr-0">{{id_Trabajador}}</td>
                <td class="p-4 align-middle [&amp;:has([role=checkbox])]:pr-0 font-semibold">{{nombre}}</td>
                <td class="p-4 align-middle [&amp;:has([role=checkbox])]:pr-0 font-semibold">{{apellido}}</td>
                <td class="p-4 align-middle [&amp;:has([role=checkbox])]:pr-0">{{email}}</td>
                <td class="p-4 align-middle [&amp;:has([role=checkbox])]:pr-0">{{id_Cargo}}</td>
              </tr>
              {{/each}}
            </tbody>
          </table>
        </div>
      </div>
    </div>
    <div class="bg-white dark:bg-gray-950 rounded-lg shadow-lg w-8/12">
      <div id="modalAdd" class="hidden">
        <div class="modal-content">
          <div class="p-4 border-b dark:border-gray-800 flex justify-between items-center">
            <h2 class="text-lg font-semibold">Añadir Trabajador</h2>
          </div>
          <div class="pt-4 pr-10 pl-10 space-y-4">
            <form class="addWorker-form">
              <div class="space-y-2">
                <label
                  class="text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70"
                  for="name">Nombre</label>
                <input
                  class="dark:text-black flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50"
                  type="text" id="name" name="name" placeholder="Jon" required>
              </div>
              <div class="space-y-2">
                <label
                  class="text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70"
                  for="surname">Apellido</label>
                <input
                  class="dark:text-black flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50"
                  type="text" id="surname" name="surname" placeholder="Lopez" required>
              </div>
              <div class="space-y-2">
                <label
                  class="text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70"
                  for="email">Email</label>
                <input
                  class="dark:text-black flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50"
                  type="email" id="email" name="email" placeholder="jon@jon.com" required>
              </div>
              <div class="space-y-2">
                <label
                  class="text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70"
                  for="password">Contraseña</label>
                <input
                  class="dark:text-black flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50"
                  type="password" id="password" name="password" placeholder="Introduzca una contraseña" required>
              </div>
              <div class="space-y-2">
                <label
                  class="text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70"
                  for="role">Cargo</label>
                <select
                  class="dark:text-black flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50"
                  id="role" name="role">
                  {{#each cargos}}
                  <option value="{{id_Cargo}}">{{nombre}}</option>
                  {{/each}}
                </select>
              </div>
              <div class="pt-4 pb-4 flex justify-center">
                <button
                  class="mr-12 text-white bg-gradient-to-r from-blue-500 via-blue-600 to-blue-700 hover:bg-gradient-to-br focus:ring-4 focus:outline-none focus:ring-blue-300 dark:focus:ring-blue-800 shadow-lg shadow-blue-500/50 dark:shadow-lg dark:shadow-blue-800/80 font-medium rounded-lg text-sm px-4 py-2.5 text-center w-32"
                  onclick="addTrabajador()" id="add-buttonAdd">Añadir</button>
                <button
                  class="ml-12 text-white bg-gradient-to-r from-blue-500 via-blue-600 to-blue-700 hover:bg-gradient-to-br focus:ring-4 focus:outline-none focus:ring-blue-300 dark:focus:ring-blue-800 shadow-lg shadow-blue-500/50 dark:shadow-lg dark:shadow-blue-800/80 font-medium rounded-lg text-sm px-4 py-2.5 text-center w-32"
                  id="cancel-buttonAdd">Cancelar</button>
              </div>
            </form>
          </div>
        </div>
      </div>
      <div id="modalDelete" class="hidden">
        <div class="modal-content">
          <div class="p-4 border-b dark:border-gray-800 flex justify-between items-center">
            <h2 class="text-lg font-semibold">Eliminar Trabajador</h2>
          </div>
          <div class="pt-4 pr-10 pl-10 space-y-4">
            <select
              class="dark:text-black flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50"
              id="worker-select">
              {{#each trabajadores}}
              <option value="{{id_Trabajador}}">{{nombre}} {{apellido}}</option>
              {{/each}}
            </select>
          </div>
          <div class="pt-4 pb-4 flex justify-center">
            <button
              class="mr-12 text-white bg-gradient-to-r from-blue-500 via-blue-600 to-blue-700 hover:bg-gradient-to-br focus:ring-4 focus:outline-none focus:ring-blue-300 dark:focus:ring-blue-800 shadow-lg shadow-blue-500/50 dark:shadow-lg dark:shadow-blue-800/80 font-medium rounded-lg text-sm px-4 py-2.5 text-center w-32"
              onclick="deleteTrabajador()" id="delete-button">Eliminar</button>
            <button
              class="mr-12 text-white bg-gradient-to-r from-blue-500 via-blue-600 to-blue-700 hover:bg-gradient-to-br focus:ring-4 focus:outline-none focus:ring-blue-300 dark:focus:ring-blue-800 shadow-lg shadow-blue-500/50 dark:shadow-lg dark:shadow-blue-800/80 font-medium rounded-lg text-sm px-4 py-2.5 text-center w-32"
              id="cancel-buttonDelete">Cancelar</button>
          </div>
        </div>
      </div>
    </div>
  </div>
</body>
<script>
  document.getElementById("addTrabajador").addEventListener("click", function () {
    document.getElementById('modalAdd').classList.remove('hidden');
    document.getElementById('modalDelete').classList.add('hidden');
  });

  document.getElementById("deleteTrabajador").addEventListener("click", function () {
    document.getElementById('modalDelete').classList.remove('hidden');
    document.getElementById('modalAdd').classList.add('hidden');
  });


  var modalAdd = document.getElementById('modalAdd');
  var modalDelete = document.getElementById('modalDelete');
  var cancelButtonAdd = document.getElementById('cancel-buttonAdd');
  var cancelButtonDelete = document.getElementById('cancel-buttonDelete');

  cancelButtonAdd.onclick = function () {
    modalAdd.classList.add('hidden');
  }

  cancelButtonDelete.onclick = function () {
    modalDelete.classList.add('hidden');
  }

  async function addTrabajador() {
    event.preventDefault();
    // Recoge los valores de los campos del formulario
    const nombre = document.getElementById("name").value;
    const apellido = document.getElementById("surname").value;
    const email = document.getElementById("email").value;
    const password = document.getElementById("password").value;
    const role = document.getElementById("role").value;

    // Guarda los valores en un objeto
    const trabajador = {
      nombre: nombre,
      apellido: apellido,
      email: email,
      password: password,
      id_Cargo: role
    };
    fetch("/add-trabajador", {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        'x-csrf-token': document.querySelector('input[name="_csrf"]').value
      },
      body: JSON.stringify(trabajador) // Convierte el objeto `trabajador` a una cadena JSON
    })
      .then(response => response.json())
      .then(data => {
        if (data.success) {
          alert("Trabajador añadido con éxito");
          location.reload();
        } else {
          alert("Hubo un error al añadir el trabajador");
        }
      })
      .catch(error => {
        console.error("Error:", error);
      });
  }

  async function deleteTrabajador() {
    const id_Trabajador = document.getElementById('worker-select').value;
    fetch("/delete-trabajador", {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        'x-csrf-token': document.querySelector('input[name="_csrf"]').value
      },
      body: JSON.stringify({ id_Trabajador: id_Trabajador })
    })
      .then(response => response.json())
      .then(data => {
        if (data.success) {
          alert("Trabajador eliminado con éxito");
          location.reload();
        } else {
          alert("Hubo un error al eliminar el trabajador");
        }
      })
      .catch(error => {
        console.error("Error:", error);
      });
  }

  let estadoAnterior = new Array(11).fill(false);

  async function checkAlarmas() {
    let response = await fetch('/tiempo-real');
    let data = await response.json();
    let alarmas = new Array(11);
    let responseLotes = await fetch('/lotes');
    let lotes = await responseLotes.json();
    alarmas[0] = data.todasTiempoReal.find(c => c.clave === 'Alarma0').valorParseado;
    alarmas[10] = data.todasTiempoReal.find(c => c.clave === 'Alarma10').valorParseado;
    alarmas[3] = data.todasTiempoReal.find(c => c.clave === 'Alarma3').valorParseado;
    alarmas[6] = data.todasTiempoReal.find(c => c.clave === 'Alarma6').valorParseado;
    alarmas[5] = data.todasTiempoReal.find(c => c.clave === 'Alarma5').valorParseado;
    alarmas[1] = data.todasTiempoReal.find(c => c.clave === 'Alarma1').valorParseado;
    alarmas[2] = data.todasTiempoReal.find(c => c.clave === 'Alarma2').valorParseado;
    alarmas[4] = data.todasTiempoReal.find(c => c.clave === 'Alarma4').valorParseado;
    alarmas[7] = data.todasTiempoReal.find(c => c.clave === 'Alarma7').valorParseado;
    alarmas[9] = data.todasTiempoReal.find(c => c.clave === 'Alarma9').valorParseado;
    alarmas[8] = data.todasTiempoReal.find(c => c.clave === 'Alarma8').valorParseado;
    for (let i = 0; i < alarmas.length; i++) {
      if (estadoAnterior[i] !== alarmas[i]) {
        let denom = 'Alarma' + i;
        let setAlarma = 'setAlarma' + i;
        let resetAlarma = 'resetAlarma' + i;
        if (alarmas[i] === true) {
          console.log('Alarma ' + i + ' ha saltado');
          let alarmaAscendente = alarmasData.todasAlarmas.find(c => c.denom === denom).id_Alarma;
          let horaSalto = data.todasTiempoReal.find(c => c.clave === setAlarma).valorParseado;
          numLote = data.todasTiempoReal.find(c => c.clave === 'idLote').valorParseado;
          let idLote = lotes.todosLotes.find(c => c.numLote === numLote).id_Lote;
          let body = {
            idAlarma: alarmaAscendente,
            horaSalto: horaSalto,
            idLote: idLote
          };
          console.log(body);
          fetch('/flanco-ascendente', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
              'x-csrf-token': document.querySelector('input[name="_csrf"]').value
            },
            body: JSON.stringify({
              body,
            }),
          });

        } else {
          console.log('Alarma ' + i + ' ha sido resuelta');
          let alarmaDescendente = alarmasData.todasAlarmas.find(c => c.denom === denom).id_Alarma;
          let horaSalto = data.todasTiempoReal.find(c => c.clave === setAlarma).valorParseado;
          numLote = data.todasTiempoReal.find(c => c.clave === 'idLote').valorParseado;
          let idLote = lotes.todosLotes.find(c => c.numLote === numLote).id_Lote;
          let horaResolucion = data.todasTiempoReal.find(c => c.clave === resetAlarma).valorParseado;
          let body = {
            idAlarma: alarmaDescendente,
            horaSalto: horaSalto,
            idLote: idLote,
            horaResolucion: horaResolucion
          };
          console.log(body);
          fetch('/flanco-descendente', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
              'x-csrf-token': document.querySelector('input[name="_csrf"]').value
            },
            body: JSON.stringify({
              body,
            }),
          });
        }
      }
    }
    estadoAnterior = alarmas;
  }

  setInterval(checkAlarmas, 500);

</script>